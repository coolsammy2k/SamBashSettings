Authentication: Service Account Example


# Create Service Account

$ kubectl create serviceaccount sa1

# Get Service account token

$ kubectl get -o yaml sa sa1 SA_SECRET="$(kubectl get sa sa1 -o jsonpath='{.secrets[0].name}')" 

$ kubectl get -o yaml secret "${SA_SECRET}" SA_TOKEN="$(kubectl get secret "${SA_SECRET}" -o jsonpath='{.data.token}' | base64 -d)"

# Send Request

$ kubectl "--token=${SA_TOKEN}" get nodes

$ kubectl config set-credentials sa1 "--token=${SA_TOKEN}"

$ kubectl config set-context sa1 --cluster demo-rbac --user sa1


 Roles and ClusterRoles

 apiVersion: rbac.authorization.k8s.io/v1
 kind: Role
 metadata:
   namespace: default
     name: role1
     rules:
     - apiGroups: ['*']
     resources: ['pods', 'pods/log'] verbs: ['get', 'list']
     - apiGroups: ['*']
       resources: ['configmaps']
         resourceNames: ['my-configmap']
           verbs: ['get', 'list']

 • Roles and ClusterRoles define a set of allowed actions on resources
 • Role is namespaced
 • Cannot include non-namespaces resources or non-resource URLs



  ClusterRoles


  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
      name: clusterRole1
      rules:
      - apiGroups: ['*']
      resources: ['nodes', ‘pods'] verbs: ['get', 'list']
      - nonResourceURLs: ['/api', '/healthz*']
        verbs: ['get', 'head']



ClusterRole is not namespaced
• non-namespaced resources access
• non-resource URLs access





 Authentication: X509 Client Cert, PKI Example
 • User: generate user private key (if not exist) 

$ openssl genrsa -out user1.key 2048

 • User: generate user CSR
 
$ openssl req -new -key user1.key -out user1.csr -subj "/CN=user1/O=group1/O=group2"

 • Admin: sign user client cert

$ openssl x509 -req -in user1.csr -CA cluster-ca.crt -CAkey cluster-ca.key \ -set_serial 101 -extensions client -days 365 -outform PEM -out user1.crt

 • User: use with kubectl via options or kubeconfig
$ kubectl --client-key=user1.key --client-certificate=user1.crt get nodes

$ kubectl config set-credentials user1 --client-key user1.key --client-certificate user1.crt --embed-certs kubectl config set-context user1 --cluster demo-rbac --user user1
$ kubectl --context=user1 get nodes
  
$ kubectl config use-context user1
$ kubectl config get-contexts
$ kubectl get nodes


 Authentication: X509 Client Cert, K8S CSR

 # User: generate user CSR
 
$ openssl req -new -key user2.key -out user2.csr -subj "/CN=user2/O=group1/O=group2"

pply -f - <<EOF
apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: user2
  spec:
    request: $(cat user2.csr | base64 | tr -d '\n')
      usages: ['digital signature', 'key encipherment',
          'client auth']
EOF



$ kubectl certificate approve user2
$ kubectl certificate deny user2
$ kubectl get csr user2 –o jsonpath='{.status.certificate}' | \
    base64 --decode > user2.crt



 User: use with kubectl via options or kubeconfig

$ kubectl --client-key=user2.key --client-certificate=user2.crt get nodes
$ kubectl config set-credentials user2 --client-key user2.key --client-certificate user2.crt --embed-certs kubectl config set-context user2 --cluster demo-rbac --user user2
