# AppArmor

AppArmor is used to further reduce the applications capabilities to reduce the attach surface of a threat.
Seccomp Profiles used to restrict syscalls for a pod, but we cannot use seccomp to restrict a programs access to specific objects such as file or a directory

How do we restrict a program to write to a filesystem or a directory ? in this case we use AppArmor, which gives us a fine grained control over the processes run in an application container.

AppArmor is a linux security module which is used to confine a program to a limited set of resources.


# To check if AppArmor is installed and enabled.

$ systemctl status apparmor

To use Apparmor the apparmor kernel module should be loaded on all the nodes where the container would run. this can be checked by the enabled file under /sys/module/apparmor/parameters directory

$ cat /sys/module/apparmor/parameters/enabled
Y

Just like Seccomp , apparmor is applied to an application through a profile. This profile must be loaded in the kernel and can be verfied by the below command.

$ cat /sys/kernel/security/apparmor/profiles

Apparmor are simple text files that define what resouces are used by an application, these include linux capabilites, network resource , file resources etc.

For Example:
A profile that restricts all file writes within a filesystem is as below

apparmor-deny-write

	profile apparmor-deny-write flags=(attach_disconnected) {
	    file,
	    # Deny all file writes.
            deny /** w,
	}

the Apparmor profiles that are loaded can be checked with the command

$ aa-status

Pofiles can be loaded in three modes. enfore, complain and unconfined

enfore: apparmor will monitor and enfore the rules on any application that suits the profile
complain:  apparmor will allow to perform the tasks without any restrictions but will log the events
unconfined: allows to applications to perform any tasks, but apparmor will not log it as events.


# Create Apparmor profile

# Create Custom application specific profiles from scratch
# As an Example, let's consider a simple bash script which creates directories in a particular directory

add_data.sh

#!/bin/bash
data_directory=/opt/app/data
mkdir -p ${data_directory}
echo "=> File created at `date` " | tee ${data_directory} create.log



$ apt-get install -y apparmor-utils

# create a profile for the shell script using aa-genprof command

$ aa-genprof /root/add_data.sh

# Open another terminal and run the bash script, apparmor will detect this file exectuion and start presenting questions in  the above aa-genprof command terminal
#After completing the questions from above command run aa-status command to check the status of the profile 

$ aa-status

# The profiles are stored under the directory
  cat /etc/apparmor.d/root.add_data.sh

New apparmor profiles and existing profiles are stored under /etc/apparmor.d/ directory


# Load Apparmor Profile

Profiles are configured in three modes
1. Enforce
2. Complain
3. Unconfined


# How to work with existing apparmor profile
# To load a profile run the below command

$ apparmor_parser -q /etc/apparmor.d/usr.sbin.nginx

# To disable the profile

$ apparmor_parser -R /etc/apparmor.d/root.add_data.sh

$ ln -s /etc/apparmor.d/root.add_data.sh /etc/apparmor.d/disable/




# AppArmor security profiles for Docker

# Load and unload profiles

To load a new profile into AppArmor for use with containers:

$ apparmor_parser -r -W /path/to/your_profile

Then, run the custom profile with --security-opt like so:

$ docker run --rm -it --security-opt apparmor=your_profile hello-world


To unload a profile from AppArmor:
# unload the profile
$ apparmor_parser -R /path/to/profile


Run without the default seccomp profile
You can pass unconfined to run a container without the default seccomp profile.
$ docker run --rm -it --security-opt seccomp=unconfined debian:jessie \
    unshare --map-root-user --user sh -c whoami

Restrict a Container's Access to Resources with AppArmor
https://kubernetes.io/docs/tutorials/clusters/apparmor/#setting-up-nodes-with-profiles

	1. Command to verify the Kubelet version of your nodes:
       $ kubectl get nodes -o=jsonpath=$'{range .items[*]}{@.metadata.name}: {@.status.nodeInfo.kubeletVersion}\n{end}'

	2. AppArmor kernel module is enabled. To check whether the module is enabled, check the /sys/module/apparmor/parameters/enabled file:
	
	   $ cat /sys/module/apparmor/parameters/enabled
         Y


	3. Profile is loaded -- AppArmor is applied to a Pod by specifying an AppArmor profile that each container should be run with. You can view which profiles are loaded on a node by checking the /sys/kernel/security/apparmor/profiles file. For example:

          $ ssh gke-test-default-pool-239f5d02-gyn2 "sudo cat /sys/kernel/security/apparmor/profiles | sort"

	4. You can also verify AppArmor support on nodes by checking the node ready condition message (though this is likely to be removed in a later release):
          $ kubectl get nodes -o=jsonpath=$'{range .items[*]}{@.metadata.name}: {.status.conditions[?(@.reason=="KubeletReady")].message}\n{end}'

	5. You can also verify directly that the container's root process is running with the correct profile by checking its proc attr:
          $ kubectl exec <pod_name> cat /proc/1/attr/current

Restrict a Container's Syscalls with Seccomp
https://kubernetes.io/docs/tutorials/clusters/seccomp/


Configure a Security Context for a Pod or Container
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


---

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: audit-nginx
spec:
  securityContext:
    seccompProfile:
      type: Localhost
      localhostProfile: profiles/audit.json
  containers:
  - image: nginx
    name: nginx


-------------------------



# AppArmor profiles in Kubernetes

Conditions:
  1. K8 Version > 1.4
  2. AppArmor Kernel Module should be enabled on all nodes
  3. AppArmor profile should be loaded on all the the worker nodes
  4. Container Runtime should be supported (docker, crio, containerd)


#Check Apparmor loaded profiles : https://kubernetes.io/docs/tutorials/clusters/apparmor/

$ cat /sys/kernel/security/apparmor/profiles | sort

 AppArmor support on nodes by checking the node ready condition message (though this is likely to be removed in a later release):

 kubectl get nodes -o=jsonpath=$'{range .items[*]}{@.metadata.name}: {.status.conditions[?(@.reason=="KubeletReady")].message}\n{end}'


 AppArmor profiles are specified per-container. To specify the AppArmor profile to run a Pod container with, add an annotation to the Pod's metadata:

 container.apparmor.security.beta.kubernetes.io/<container_name>: <profile_ref>
 
 Where <container_name> is the name of the container to apply the profile to, and <profile_ref> specifies the profile to apply. The profile_ref can be one of:

 runtime/default            : to apply the runtime's default profile
 localhost/<profile_name>   : to apply the profile loaded on the host with the name <profile_name>
 unconfined                 : to indicate that no profiles will be loaded



Example: ubuntu-sleeper.yaml

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
spec:
  containers:
  - name: hello
    image: ubuntu
    command: [ "sh", "-c", "echo 'Sleeping for an hour!' && sleep 1h" ]


# Profile, apparmor-deny-write

profile apparmor-deny-write flags=(attach_disconnected) {
  file,
  # Deny all file writes.
  deny /** w,
}

# Make sure this above profile is loaded on all the nodes by using the aa-status command

$ aa-status

# Apparmor profiles are applied per container and since this is still in beta, we need
add this as an annotation to pods metadata 

File: ubuntu-sleeper.yaml

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  annotations:
    container.apparmor.security.beta.kubernetes.io/<container_name>: localhost/<profile-name>
    container.apparmor.security.beta.kubernetes.io/ubuntu-sleeper: localhost/apparmor-deny-write

spec:
  containers:
  - name: ubuntu-sleeper
    image: ubuntu
    command: [ "sh", "-c", "echo 'Sleeping for an hour!' && sleep 1h" ]

$ kubectl create -f ubuntu-sleeper.yaml

$ kubectl logs ubuntu-sleeper
  sleeping for an hour!

# Test this profile

$ kubectl exec -it ubuntu-sleeper -- touch /tmp/test
  touch: cannot touch '/tmp/test' : Permission denied
  command terminated with exit code 1

---


apiVersion: v1
kind: Pod
metadata:
  annotations:
    container.apparmor.security.beta.kubernetes.io/nginx: localhost/restricted-frontend #Apply profile 'restricted-fronend' on 'nginx' container 
  labels:
    run: nginx
  name: frontend-site
  namespace: omni
spec:
  serviceAccount: frontend-default #Use the service account with least privileges
  containers:
  - image: nginx:alpine
    name: nginx
    volumeMounts:
    - mountPath: /usr/share/nginx/html
      name: test-volume
  volumes:
  - name: test-volume
    hostPath:
       path: /data/pages
       type: Directory


---
# Killer.sh

# Update the profile if app produced some more usage logs(syslog)
$ aa-logprof

# put profile in enforce mode
$ aa-enforce

# generate a new profile (smart wrapper around aa-logprof)
$ aa-genprof


# Setup simple AppArmor profile for curl


