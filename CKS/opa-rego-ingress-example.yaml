apiVersion: networking.k8s.io/v1 
kind: Ingress
metadata:
  name: prod
  namespace: test-1
spec:
  rules:
  - host: initech.com
    http:
      paths:
      - path: /finance-1
        pathType: Prefix
        backend:
          service:
            name: banking
            port: 
              number: 443


---
# Ingress Test-2 example 

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod
  namespace: test-2
spec:
  rules:
  - host: initech.com
    http:
      paths:
      - path: /finance-2
        pathType: Prefix
        backend:
          service:
            name: banking
            port: 
              number: 443

---

#OPA Rego Unique host example


kind: ConfigMap
apiVersion: v1
metadata :
    name: unique-host
    labels :
      openpolicyagent.org/policy: rego
data :
  main: |
      package kubernetes.admission

      deny[msg] {
          some other_ns, other_ingress
          input.request.kind.kind == "Ingress"
          input.request.operation == "CREATE"
          host := input.request.object.spec.rules[_].host
          ingress := ingresses[other_ns][other_ingress]
          other_ns != input.request.namespace
          ingress.spec.rules[_].host == host
          msg := sprintf("invalid ingress host %q (conflicts with %v/%v)", [host, other_ns, other_ingress])
          }


---

#OPA Rego Untrusted registry Config example


kind: ConfigMap
apiVersion: v1
metadata :
    name: untrusted-registry
    labels :
      openpolicyagent.org/policy: rego
data :
  main: |
      package kubernetes.admission

      deny[msg] {
          input.request.kind.kind == "Pod"
          image := input.request.object.spec.containers[_].image
          not startswith(image, "hooli.com/")
          msg := sprintf("image '%v' comes from untrusted registry", [image])
          }
