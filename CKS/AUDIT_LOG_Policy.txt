Audit Logging has been enabled in the cluster with an Audit Policy located at /etc/kubernetes/audit/policy.yaml on cluster2-master1.

Change the configuration so that only one backup of the logs is stored.

Alter the Policy in a way that it only stores logs:

From Secret resources, level Metadata
From "system:nodes" userGroups, level RequestResponse
After you altered the Policy make sure to empty the log file so it only contains entries according to your changes, like using truncate -s 0 /etc/kubernetes/audit/logs/audit.log.

➜ root@cluster2-master1:~# vim /etc/kubernetes/manifests/kube-apiserver.yaml 

# /etc/kubernetes/manifests/kube-apiserver.yaml 
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.100.21:6443
  creationTimestamp: null
  labels:
    component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --audit-policy-file=/etc/kubernetes/audit/policy.yaml
    - --audit-log-path=/etc/kubernetes/audit/logs/audit.log
    - --audit-log-maxsize=5
    - --audit-log-maxbackup=1                                    # CHANGE
    - --advertise-address=192.168.100.21
    - --allow-privileged=true




Now we look at the existing Policy:


➜ root@cluster2-master1:~# vim /etc/kubernetes/audit/policy.yaml

# /etc/kubernetes/audit/policy.yaml
apiVersion: audit.k8s.io/v1
kind: Policy
rules:
- level: Metadata
We can see that this simple Policy logs everything on Metadata level. So we change it to the requirements:


# /etc/kubernetes/audit/policy.yaml
apiVersion: audit.k8s.io/v1
kind: Policy
rules:

# log Secret resources audits, level Metadata
- level: Metadata
  resources:
  - group: ""
    resources: ["secrets"]

# log node related audits, level RequestResponse
- level: RequestResponse
  userGroups: ["system:nodes"]

# for everything else don't log anything
- level: None



---

apiVersion: audit.k8s.io/v1
kind: Policy
rules:
- level: Metadata
  namespace: ["prod"]
  verb: ["delete"]
  resources:
  - group: ""
    resource: ["secrets"]

---------------------------------------

Next, make sure to enable logging in api-server:

 - --audit-policy-file=/etc/kubernetes/prod-audit.yaml
 - --audit-log-path=/var/log/prod-secrets.log
 - --audit-log-maxage=30     # Max days the files will be stored
 - --audit-log-maxsize=100   # Max size of file
 - --audit-log-maxbackup=5   # 


Then, add volumes and volume mounts as shown in the below snippets.


volumes:
  - name: audit
    hostPath:
      path: /etc/kubernetes/prod-audit.yaml
      type: File
- name: audit-log
    hostPath:
      path: /var/log/prod-secrets.log
      type: FileOrCreate
volumeMounts:
  - mountPath: /etc/kubernetes/prod-audit.yaml
    name: audit
    readOnly: true
  - mountPath: /var/log/prod-secrets.log
    name: audit-log
    readOnly: true

---
audit-policy.yaml


apiVersion: audit.k8s.io/v1
kind: Policy
omitStages: ["RequestReceived"]
rules:
    -level: Metadata
    namespace: ["prod-namespace"]
     verb: ["delete"]
     resources:
     -groups: " "
      resources: ["pods"]

---

apiVersion: audit.k8s.io/v1
kind: Policy
omitStages: ["RequestReceived"]
rules:
    -namespace: ["prod-namespace"]
     verb: ["delete"]
     resources:
     -groups: " "
      resources: ["pods"]
      resourceNames: ["webapp-pod"]
     level: None  # No events will be logged
            Metadata # least verbose level
            Request # more verbose
            RequestResponse 
