# View Enabled Admission Controllers

$ kube-apiserver -h | grep enable-admission-plugins


# View Enabled Admission controller by DEFAULT in Kubernetes

$ kubectl exec -it kube-apiserver-controlplane -n kube-system -- kube-apiserver -h | grep 'enable-admission-plugins'

# Create Secret with tls
$ kubectl create secret tls webhook-server-tls \
  --cert=/root/keys/webhook-server-tls.crt \
  --key=/root/keys/webhook-server-tls.key -n webhook-demo

# Enable Admission controller. Add this in kube-apiserver.yaml
  
  - --enable-admission-plugins=NodeRestriction,RBAC,NamespaceAutoProvision

# Disable Admission Controllers , add this in kube-apiserver.yaml

  - --disable-admission-plugins=DefaultStorageClass

# Check the process to see enabled and disabled plugins.
ps -ef | grep kube-apiserver | grep admission-plugins


Admission Controllers pre-built in

1. AlwaysPullImages   :Images are always pulled when a pod is created
2. DefaultStorageClass : Observes the creation of PVC and adds a default storageclass
3. EventRateLimit      : Set's a limit to number of calls to API server
4. NamespaceExists     : Checks for existing namespace if not reject the request.

5. NamespaceAutoPorvision : This admission controller is not enabled by default

NamespaceExists and NamespaceAutoProvision admission controllers are deprecated and now replaced by NamespaceLifecycle admission controller


Different Types of Admission Controllers and how to deploy an admission controller
1. Mutating Admission controller:  It can change or mutate the object before creating, for example DefaultStorageClass adds DefaultStorage if not found in the yaml request
2. Validating Admission controller: 

there can be admission controllers which can do both Validate and Mutate.

Generally Mutating Admission controllers are invoked first before Validating admission controllers, this is so becuase any change done by Mutating Admission controllers can be validated first before creating the object.


to support external admission controllers there are two special admission controllers
1. Mutating Admission Webhook 
2. Validating Admission webhook

How do we setup Webhook

1. First we must deploy our own webhook admission server which will have our own logic
2. and then we configure the webhook on kubernetes by creating a Webhook Configuration Object.

Webhook server can be deployed externally or can be created as a deployment.
If created as a deployment then it will have
1. Webhook-deployment and Webhook-service

then we create the configuration objects either  depending on the need
 Validating Webhook Configuration object
 Mutating Webhook configuration object
Example below of ValidatingWebhookConfiguration

apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-policy.example.com"
webhooks:
  - name: "pod-policy.example.com"
    clientConfig:
      service:
        name: "webhook-service"
        namespace: "webhook-namespace"
      caBundle: "CiOtLS0tQk......tLS0K"

  rules:
    - apiGroups: [""]
      apiVersions: ["v1"]
      operations: ["CREATE"]
      resources:  ["pods"]
      scope: "Namespaced"


---


#Create the below admission-configuration inside /root/CKS/ImagePolicy directory in the controlplane
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: ImagePolicyWebhook
  configuration:
    imagePolicy:
      kubeConfigFile: /etc/admission-controllers/admission-kubeconfig.yaml
      allowTTL: 50
      denyTTL: 50
      retryBackoff: 500
      defaultAllow: false           # If default is true then pod creation will fail if the admission webhook is not available

#The /root/CKS/ImagePolicy is mounted at the path /etc/admission-controllers directory in the kube-apiserver. So, you can directly place the files under /root/CKS/ImagePolicy.
#---snippet of the volume and volumeMounts (already added to apiserver config) ---#
  containers:
  .
  .
  .
  volumeMounts:
  - mountPath: /etc/admission-controllers
      name: admission-controllers
      readOnly: true

  volumes:
  - hostPath:
      path: /root/CKS/ImagePolicy/
      type: DirectoryOrCreate
    name: admission-controllers



#Next, update the kube-apiserver command flags and add ImagePolicyWebhook to the enable-admission-plugins flag. Use the configuration file that was created in the previous step as the value of 'admission-control-config-file'. 
#Note: Remember, this command will be run inside the kube-apiserver container, so the path must be /etc/admission-controllers/admission-configuration.yaml (mounted from /root/CKS/ImagePolicy in controlplane)
    - --admission-control-config-file=/etc/admission-controllers/admission-configuration.yaml
    - --enable-admission-plugins=NodeRestriction,ImagePolicyWebhook



---
/etc/kubernetes/pki/admission_kube_config.yaml

apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /etc/kubernetes/pki/server.crt
    server: https://image-bouncer-webhook:30080/image_policy
  name: bouncer_webhook
contexts:
- context:
    cluster: bouncer_webhook
    user: api-server
  name: bouncer_validator
current-context: bouncer_validator
preferences: {}
users:
- name: api-server
  user:
    client-certificate: /etc/kubernetes/pki/apiserver.crt
    client-key:  /etc/kubernetes/pki/apiserver.key



---



We need to make sure that when pods are created in this cluster, they cannot use the latest image tag, irrespective of the repository being used. 
To achieve this, a simple Admission Webhook Server has been developed and deployed. A service called image-bouncer-webhook is exposed in the cluster internally. This Webhook server ensures that the developers of the team cannot use the latest image tag. Make use of the following specs to integrate it with the cluster using an ImagePolicyWebhook:
	1. Create a new admission configuration file at /etc/admission-controllers/admission-configuration.yaml
	2. The kubeconfig file with the credentials to connect to the webhook server is located at /root/CKS/ImagePolicy/admission-kubeconfig.yaml. Note: The directory /root/CKS/ImagePolicy/has already been mounted on the kube-apiserver at path /etc/admission-controllers so use this path to store the admission configuration.
	3. Make sure that if the latest tag is used, the request must be rejected at all times.
	4. Enable the Admission Controller.
Finally, delete the existing pod in the magnum namespace that is in violation of the policy and recreate it, ensuring the same image but using the tag 1.27




#Create the below admission-configuration inside /root/CKS/ImagePolicy directory in the controlplane
apiVersion: apiserver.config.k8s.io/v1
kind: AdmissionConfiguration
plugins:
- name: ImagePolicyWebhook
  configuration:
    imagePolicy:
      kubeConfigFile: /etc/admission-controllers/admission-kubeconfig.yaml
      allowTTL: 50
      denyTTL: 50
      retryBackoff: 500
      defaultAllow: false

#The /root/CKS/ImagePolicy is mounted at the path /etc/admission-controllers directory in the kube-apiserver. So, you can directly place the files under /root/CKS/ImagePolicy.
#---snippet of the volume and volumeMounts (already added to apiserver config) ---#
  containers:
  .
  .
  .
  volumeMounts:
  - mountPath: /etc/admission-controllers
      name: admission-controllers
      readOnly: true

  volumes:
  - hostPath:
      path: /root/CKS/ImagePolicy/
      type: DirectoryOrCreate
    name: admission-controllers
#---------------------------------------------------------------------------------# 



#Next, update the kube-apiserver command flags and add ImagePolicyWebhook to the enable-admission-plugins flag. Use the configuration file that was created in the previous step as the value of 'admission-control-config-file'. 
#Note: Remember, this command will be run inside the kube-apiserver container, so the path must be /etc/admission-controllers/admission-configuration.yaml (mounted from /root/CKS/ImagePolicy in controlplane)
    - --admission-control-config-file=/etc/admission-controllers/admission-configuration.yaml
    - --enable-admission-plugins=NodeRestriction,ImagePolicyWebhook

