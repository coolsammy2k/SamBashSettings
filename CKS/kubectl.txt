how to make kubectl jsonpath output on separate lines

$ kubectl get pods -A -o jsonpath='{.items[*].status.podIP}'

adding new lines

$ kubectl get pods -A -o jsonpath='{range .items[*]}{.status.podIP}{"\n"}{end}'

# Pod Namespaces/names along with their IPSs
$ kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.namespace}{"/"}{.metadata.name}{","}{.status.podIP}{"\n"}{end}'


4. Create YAML from kubectl commands 

$ kubectl run busybox --image=busybox --dry-run=client -o yaml --restart=Never > yamlfile.yaml

$ kubectl create job my-job --dry-run=client -o yaml --image=busybox -- date  > yamlfile.yaml

$ kubectl get -o yaml deploy/nginx > 1.yaml (Ensure that you have a deployment named as nginx)

$ kubectl run busybox --image=busybox --dry-run=client -o yaml --restart=Never -- /bin/sh -c "while true; do echo hello; echo hello again;done" > yamlfile.yaml

$ kubectl run wordpress --image=wordpress –-expose –-port=8989 --restart=Never -o yaml

$ kubectl run test --image=busybox --restart=Never --dry-run=client -o yaml -- bin/sh -c 'echo test;sleep 100' > yamlfile.yaml  (Notice that --bin comes at the end. This will create yaml file.)



# Identifying which containers in our pod are running the upstream redis image.

$ kubectl get pods -o jsonpath='{.items[0].spec.containers[?(@.image == "redis")].name}'


$ kubectl get pods -A -o \
    'custom-columns=POD:metadata.name,IMAGE:spec.containers[*].image' | \
        column -t -s,


$ cat versions.fmt
NAMESPACE            NAME           IMAGE
metadata.namespace   metadata.name  status.containerStatuses[0].imageID

$ kubectl get pods -A -o custom-columns-file=versions.fmt

$ kubectl get pods -A -o \
  custom-columns=NAMESPACE:metadata.namespace,NAME:metadata.name


List Container images by Pod
$ kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' |\
sort


List Container images filtering by Pod label

$ kubectl get pods --all-namespaces -o=jsonpath='{..image} {"\n"}' -l app=nginx


List all Container images in all namespaces

$ kubectl get pods --all-namespaces -o jsonpath="{..image}" |\
tr -s '[[:space:]]' '\n' |\
sort |\
uniq -c


#Api Resource in groups
kubectl api-resources --api-group apps -o wide



# Verify k8s release binaries

$ sha512sum < Release >

$ sha512sum <Release> > compare

$ cat compare | uniq


$ docker ps | grep apiserver

$ docker cp <container_id>:/ container-filesystem

$ cd container-filesystem

$ find container-filesystem/ | grep kube-apiserver

$ sha512sum container-filesystem/usr/local/bin/kube-apiserver



#Docker Image Build example

FROM ubuntu
ARG DEBIAN_FRONTEDN=noninteractive
RUN apt-get update && apt-get install -y golang-go
COPY app.go .
RUN CGO_ENABLED=0 go build app.go

FROM alpine:3.12.1
RUN addgroup -S appgroup && adduser -S appuser -G appgroup -h /home/appuser
COPY --from=0 /app /home/appuser/
USER appuser
CMD ["/home/appuser/app"]

---

# You can delete pods fast with, Ctrl+z to put the job to background

$ kubectl delete pod x --grace-period 0 --force


export do="--dry-run=client -o yaml"

$ kubectl run pod1 --image=nginx $do


Vim

Also create the file ~/.vimrc with the following content:

set shiftwidth=2
set tabstop=2
set expandtab


---
 Write all context names i
k config get-contexts # copy by hand
k config get-contexts -o name > /opt/course/1/contexts

k config view -o jsonpath="{.contexts[*].name}"
k config view -o jsonpath="{.contexts[*].name}" | tr " " "\n" # new lines
k config view -o jsonpath="{.contexts[*].name}" | tr " " "\n" > /opt/course/1/contexts


From the kubeconfig extract the certificate of user

k config view --raw
OR

k config view --raw -ojsonpath="{.users[2].user.client-certificate-data}" | base64 -d > /opt/course/1/cert

OR

k config view --raw -ojsonpath="{.users[?(.name == 'restricted@infra-prod')].user.client-certificate-data}" | base64 -d > /opt/course/1/cert


---
# List the latest EVENTS in kubernetes cluster by timestamp

➜ k -n team-red get events --sort-by='{.metadata.creationTimestamp}'
