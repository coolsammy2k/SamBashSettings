Todays Task: RBAC
Create two Namespaces ns1 and ns2
Create ServiceAccount (SA) pipeline in both Namespaces
These SAs should be allowed to view almost everything in the whole cluster. You can use the default ClusterRole view for this
These SAs should be allowed to create and delete Deployments in Namespaces ns1 and ns2
Verify everything using kubectl auth can-i
.
.
.
.
.

Solution

alias k=kubectl

1. Create Namespaces

  k create ns ns1
  k create ns ns2

2. Create ServiceAccounts

  k -n ns1 create sa pipeline
  k -n ns2 create sa pipeline

3. View whole cluster

  k get clusterrole view # there is default one
  k create clusterrolebinding -h # examples
  k create clusterrolebinding pipeline-view --clusterrole view --serviceaccount ns1:pipeline --serviceaccount ns2:pipeline

4. Manage Deployments in certain Namespaces

k create clusterrole -h # examples
  k create clusterrole pipeline-deployment-manager --verb create,delete --resource deployments

  k create rolebinding -h # examples
  k -n ns1 create rolebinding pipeline-deployment-manager --clusterrole pipeline-deployment-manager --serviceaccount ns1:pipeline
  k -n ns2 create rolebinding pipeline-deployment-manager --clusterrole pipeline-deployment-manager --serviceaccount ns2:pipeline

Instead we could also create the same Role in both Namespaces.

5. Verify

Explanation here why SAs will be references like this.
# namespace ns1 deployment manager
  k auth can-i delete deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i create deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i update deployments --as system:serviceaccount:ns1:pipeline -n ns1 # NO
  k auth can-i update deployments --as system:serviceaccount:ns1:pipeline -n default # NO

# namespace ns2 deployment manager
  k auth can-i delete deployments --as system:serviceaccount:ns2:pipeline -n ns2 # YES
  k auth can-i create deployments --as system:serviceaccount:ns2:pipeline -n ns2 # YES
  k auth can-i update deployments --as system:serviceaccount:ns2:pipeline -n ns2 # NO
  k auth can-i update deployments --as system:serviceaccount:ns2:pipeline -n default # NO

# cluster wide view role

  k auth can-i list deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i list deployments --as system:serviceaccount:ns1:pipeline -A # YES
  k auth can-i list pods --as
  system:serviceaccount:ns1:pipeline -A # YES
  k auth can-i list pods --as
  system:serviceaccount:ns2:pipeline -A # YES
  k auth can-i list secrets --as
  system:serviceaccount:ns2:pipeline -A # NO (default view-role doesn't allow)

We see that the default ClusterRole view actually doesn’t allow to view Secrets by default.




---



Create Namespace applications
User smoke should be allowed to create and delete Pods, Deployments and StatefulSets in Namespace applications
User smoke should have view permissions (like the permissions of the default ClusterRole named view) in all Namespaces but not in kube-system
User smoke should be allowed to see available Secrets in Namespace applications. Just Secret names, no data.
Verify everything using kubectl auth can-i
Verify everything using an actual user smoke by creating it like done here
.
.
.
.
.
Solution
  alias k=kubectl

1. Create Namespace

  k create ns applications

2. RBAC applications
  k -n applications create role smoke --verb create,delete --resource pods,deployments,sts
  k -n applications create rolebinding smoke --role smoke --user smoke

3. RBAC view everywhere but not kube-system
  As of now it’s not possible to create deny-RBAC in K8s, only allowing things.
  k get ns # get all namespaces
  k -n applications create rolebinding smoke-view --clusterrole view --user smoke
  k -n default create rolebinding smoke-view --clusterrole view --user smoke
  k -n kube-node-lease create rolebinding smoke-view --clusterrole view --user smoke
  k -n kube-public create rolebinding smoke-view --clusterrole view --user smoke

4. RBAC only view Secret names

This is NOT POSSIBLE using plain K8s RBAC. You might think of doing this:
# NOT POSSIBLE like this
  k -n applications create role list-secrets --verb list --resource secrets
  k -n applications create rolebinding...
Having the list verb you can simply run kubectl get secrets -oyaml and see all content. Dangerous misconfiguration!

5. Verify
  # applications
  k auth can-i create deployments --as smoke -n applications # YES
  k auth can-i delete deployments --as smoke -n applications # YES
  k auth can-i delete pods --as smoke -n applications # YES
  k auth can-i delete sts --as smoke -n applications # YES
  k auth can-i delete secrets --as smoke -n applications # NO
  k auth can-i list deployments --as smoke -n applications # YES
  k auth can-i list secrets --as smoke -n applications # NO

# view in all namespaces but not kube-system
  k auth can-i list pods --as smoke -n default # YES
  k auth can-i list pods --as smoke -n applications # YES
  k auth can-i list pods --as smoke -n kube-public # YES
  k auth can-i list pods --as smoke -n kube-node-lease # YES
  k auth can-i list pods --as smoke -n kube-system # NO

6. Verify as real User
  Create user like done here.
  k config use-context smoke
  k get pods -n kube-system # NO
  k get pods -n applications # YES
etc...


---

#michelle RBAC, ClusterRole, ClusterRolebinding example

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-admin
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "watch", "list", "create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: michelle-binding
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: node-admin
  apiGroup: rbac.authorization.k8s.io


---

# Michelle-storage-admin RBAC & ClusterRole

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: storage-admin
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "watch", "list", "create", "delete"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "watch", "list", "create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: michelle-storage-admin
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: storage-admin
  apiGroup: rbac.authorization.k8s.io
