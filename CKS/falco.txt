Falco Installation

1. As Daemonset Using Helm: $ helm repo add falcosecurity https://falcosecurity.github.io/charts
                            $ helm repo update
                            $ helm install falco falcosecurity/falco
2. Install as a Package:
     $ curl -s https://falco.org/repo/falcosecurity-3672BA8F.asc | apt-key add -
     $ echo "deb https://download.falco.org/packages/deb stable main" | tee -a /etc/apt/sources.list.d/falcosecurity.list
     $ apt update -y
     $ apt get install -y linux-headers-$(uname -r)
     $ apt install -y falco
    


Falco Configuration File: /etc/falco/falco.yaml


#Debug falco
$ journalctl -ju falco


Falco Service Unit file: /usr/lib/systemd/system/falco.service

Hot Reload

$ cat /var/run/falco.pid

$ kill -1 $(cat /var/run/falco.pid)




A pod in the sahara namespace has generated alerts that a shell was opened inside the container.
Change the format of the output so that it looks like below:
ALERT timestamp of the event without nanoseconds,User ID,the container id,the container image repository
Make sure to update the rule in such a way that the changes will persists across Falco updates.
You can refer the falco documentation Here





#Add the below rule to /etc/falco/falco_rules.local.yaml and restart falco to override the currentrule
#
- rule: Terminal shell in container
  desc: A shell was used as the entrypoint/exec point into a container with an attached terminal.
  condition: >
    spawned_process and container
    and shell_procs and proc.tty != 0
    and container_entrypoint
    and not user_expected_terminal_shell_in_container_conditions
  output: >
    %evt.time.s,%user.uid,%container.id,%container.image.repository
  priority: ALERT
  tags: [container, shell, mitre_execution]

# Use the falco documentation the use the correct sysdig filters in the output. For example, the evt.time.s filter prints the timestamp for the event without nano seconds. This is clearly described in the falco documentation here - https://falco.org/docs/rules/supported-fields/#evt-field-class


# Falco Configuration Files

How to update existing rules and how to add custom rules

Rules are configured at /etc/falco/falco.yaml, falco uses this file during falco startup

$ journalctl -u falco


# How rules are loaded by falco present in /etc/falco/falco.yaml under rules_file filed, order in which the rules are declared in this list is important

rules_file: 
   - /etc/falco/falco_rules.yaml
   - /etc/falco/falco_rules.local.yaml
   - /etc/falco/k8s_audit_rules.yaml
   - /etc/falco/rules.d


json_output: false    # events are logged as text
log_stderr: true
log_syslog: true
log_level: info       # logs generated are specific to falco istself

priority: debug       # is related to falco rules, this is minimum priority , every event will be logged by default

# output channels

stdout_output:
   enabled: true

file_output:
   enabled: true
   filename: /opt/falco/events.txt

program_output:
   enabled: true
   program: "jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX"

http_output:
   enabled: true
   url: http://some.url/some/path/

any changes to these files need a falco reload using $kill -1 $(cat /var/run/falco.pid)

The /etc/falco/falco_rules.yaml is the default rules file which contains all the rules, list, macros , built in rules

Falco comes bundled with plenty of built in rules that cover several situations that we would want to audit. However we can override or write out our own rules

We should always update the falco_rules.local.yaml to changed rules. We can add our own custom rules

priority: WARNING
priority: CRITICAL



---

##Enable file_output in /etc/falco/falco.yaml
file_output:
  enabled: true
  keep_alive: false
  filename: /opt/security_incidents/alerts.log

#Add the updated rule under the /etc/falco/falco_rules.local.yaml and hot reload the Falco service on node01:
- rule: Write below binary dir
  desc: an attempt to write to any file below a set of binary directories
  condition: >
    bin_dir and evt.dir = < and open_write
    and not package_mgmt_procs
    and not exe_running_docker_save
    and not python_running_get_pip
    and not python_running_ms_oms
    and not user_known_write_below_binary_dir_activities
  output: >
    File below a known binary directory opened for writing (user=%user.name file_updated=%fd.name command=%proc.cmdline)
  priority: CRITICAL
  tags: [filesystem, mitre_persistence]

#To perform hot-reload falco use 'kill -1 /SIGHUP' on node01:
$ kill -1 $(cat /var/run/falco.pid)





