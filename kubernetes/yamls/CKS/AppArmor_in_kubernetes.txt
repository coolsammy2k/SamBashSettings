# AppArmor in Kubernetes

Conditions:
  1. K8 Version > 1.4
  2. AppArmor Kernel Module should be enabled on all nodes
  3. AppArmor profile should be loaded on all the the worker nodes
  4. Container Runtime should be supported (docker, crio, containerd)


#Check Apparmor loaded profiles : https://kubernetes.io/docs/tutorials/clusters/apparmor/

$ cat /sys/kernel/security/apparmor/profiles | sort

 AppArmor support on nodes by checking the node ready condition message (though this is likely to be removed in a later release):

 kubectl get nodes -o=jsonpath=$'{range .items[*]}{@.metadata.name}: {.status.conditions[?(@.reason=="KubeletReady")].message}\n{end}'


 AppArmor profiles are specified per-container. To specify the AppArmor profile to run a Pod container with, add an annotation to the Pod's metadata:

 container.apparmor.security.beta.kubernetes.io/<container_name>: <profile_ref>
 
 Where <container_name> is the name of the container to apply the profile to, and <profile_ref> specifies the profile to apply. The profile_ref can be one of:

 runtime/default            : to apply the runtime's default profile
 localhost/<profile_name>   : to apply the profile loaded on the host with the name <profile_name>
 unconfined                 : to indicate that no profiles will be loaded



Example: ubuntu-sleeper.yaml

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
spec:
  containers:
  - name: hello
    image: ubuntu
    command: [ "sh", "-c", "echo 'Sleeping for an hour!' && sleep 1h" ]


# Profile, apparmor-deny-write

profile apparmor-deny-write flags=(attach_disconnected) {
  file,
  # Deny all file writes.
  deny /** w,
}

# Make sure this above profile is loaded on all the nodes by using the aa-status command

$ aa-status

# Apparmor profiles are applied per container and since this is still in beta, we need
add this as an annotation to pods metadata 

File: ubuntu-sleeper.yaml

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  annotations:
    container.apparmor.security.beta.kubernetes.io/<container_name> localhost/<profile-name>
    container.apparmor.security.beta.kubernetes.io/ubuntu-sleeper: localhost/apparmor-deny-write

spec:
  containers:
  - name: ubuntu-sleeper
    image: ubuntu
    command: [ "sh", "-c", "echo 'Sleeping for an hour!' && sleep 1h" ]

$ kubectl create -f ubuntu-sleeper.yaml

$ kubectl logs ubuntu-sleeper
  sleeping for an hour!

# Test this profile

$ kubectl exec -it ubuntu-sleeper -- touch /tmp/test
  touch: cannot touch '/tmp/test' : Permission denied
  command terminated with exit code 1


