Todays Task: RBAC
Create two Namespaces ns1 and ns2
Create ServiceAccount (SA) pipeline in both Namespaces
These SAs should be allowed to view almost everything in the whole cluster. You can use the default ClusterRole view for this
These SAs should be allowed to create and delete Deployments in Namespaces ns1 and ns2
Verify everything using kubectl auth can-i
.
.
.
.
.

Solution

alias k=kubectl

1. Create Namespaces

  k create ns ns1
  k create ns ns2

2. Create ServiceAccounts

  k -n ns1 create sa pipeline
  k -n ns2 create sa pipeline

3. View whole cluster

  k get clusterrole view # there is default one
  k create clusterrolebinding -h # examples
  k create clusterrolebinding pipeline-view --clusterrole view --serviceaccount ns1:pipeline --serviceaccount ns2:pipeline

4. Manage Deployments in certain Namespaces

k create clusterrole -h # examples
  k create clusterrole pipeline-deployment-manager --verb create,delete --resource deployments

  k create rolebinding -h # examples
  k -n ns1 create rolebinding pipeline-deployment-manager --clusterrole pipeline-deployment-manager --serviceaccount ns1:pipeline
  k -n ns2 create rolebinding pipeline-deployment-manager --clusterrole pipeline-deployment-manager --serviceaccount ns2:pipeline

Instead we could also create the same Role in both Namespaces.

5. Verify

Explanation here why SAs will be references like this.
# namespace ns1 deployment manager
  k auth can-i delete deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i create deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i update deployments --as system:serviceaccount:ns1:pipeline -n ns1 # NO
  k auth can-i update deployments --as system:serviceaccount:ns1:pipeline -n default # NO

# namespace ns2 deployment manager
  k auth can-i delete deployments --as system:serviceaccount:ns2:pipeline -n ns2 # YES
  k auth can-i create deployments --as system:serviceaccount:ns2:pipeline -n ns2 # YES
  k auth can-i update deployments --as system:serviceaccount:ns2:pipeline -n ns2 # NO
  k auth can-i update deployments --as system:serviceaccount:ns2:pipeline -n default # NO

# cluster wide view role

  k auth can-i list deployments --as system:serviceaccount:ns1:pipeline -n ns1 # YES
  k auth can-i list deployments --as system:serviceaccount:ns1:pipeline -A # YES
  k auth can-i list pods --as
  system:serviceaccount:ns1:pipeline -A # YES
  k auth can-i list pods --as
  system:serviceaccount:ns2:pipeline -A # YES
  k auth can-i list secrets --as
  system:serviceaccount:ns2:pipeline -A # NO (default view-role doesn't allow)

We see that the default ClusterRole view actually doesnâ€™t allow to view Secrets by default.
