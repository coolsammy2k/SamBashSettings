SECCOMP: Secure Computing

# Restricting SYSCALLS

$ grep -i seccomp /boot/config-$(uname -r)

$ docker run docker/whalesay cowsay hello!

$ docker run -it --rm --security-opt seccomp=unconfined docker/whalesay /bin/sh

# SECCOMP in Kubernetes

$ kubectl run amicontained --image r.j3ss.co/amicontained amicontained -- amicontained

$ kubectl logs amicontained




https://kubernetes.io/docs/tutorials/clusters/seccomp/

Restrict a Container's Syscalls with Seccomp

apiVersion: v1
kind: Pod
metadata:
  name: audit-pod
  labels:
    app: audit-pod
spec:
  securityContext:
    seccompProfile:
      type: Localhost
      localhostProfile: profiles/audit.json
  containers:
  - name: test-container
    image: hashicorp/http-echo:0.2.3
    args:
    - "-text=just made some syscalls!"
    securityContext:
      allowPrivilegeEscalation: false


---


$ docker run --user=1001 ubuntu sleep 3600

$ docker run --cap-add MAC_ADMIN ubuntu

---
apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
    securityContext:
        runAsUser: 1000

    containers:
       - name: ubuntu
         image: ubuntu
         command: ["sleep","3600"]


---

apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
    securityContext:
        runAsUser: 1000

    containers:
       - name: ubuntu
         image: ubuntu
         command: ["sleep","3600"]
         securityContext:
            runAsUser: 1000
            capabilities:
                add: ["MAC_ADMIN"]


---

For answering the next question, open a new terminal and ssh to node01 and run the Tracee tool as a container, with the appropriate flag to detect syscalls from new containers.


On node01, run: 
$ docker run --name tracee --rm --privileged -v /lib/modules/:/lib/modules/:ro -v /usr/src:/usr/src:ro -v /tmp/tracee:/tmp/tracee -it aquasec/tracee:0.4.0 --trace container=new


---



apiVersion: v1
kind: Pod
metadata:
  name: test-audit
spec:
  securityContext:
    seccompProfile:
      type: Localhost
      localhostProfile:                         # <path to custom JSON file>  relative to  /var/lib/kubelet/seccomp
                                                # mkdir -p /var/lib/kubelet/seccomp/profiles
                                                #  /var/lib/kubelet/seccomp/profiles/audit.json
                                                #  {
                                                #       "defaultAction": "SCMP_ACT_LOG"
                                                #  }
                                                #  $grep syscall /var/log/syslog
                                                #  $ grep -w 35 /usr/include/asm/unistd_64.h   => #define __NR_nanosleep 35
  containers:
  - command: ["bash", "-c", "echo 'I just made some syscalls' && sleep 100"]
    image: ubuntu
    name: ubuntu
    securityContext:
      allowPrivilegeEscalation: false

---
pod-definition.yaml


apiVersion: v1
kind: Pod
metadata:
  labels:
    run: amicontained
  name: amicontained
spec:
  securityContext:
    seccompProfile:
      type: RuntimeDefault
  containers:
  - args:
    - amicontained
    image: r.j3ss.co/amicontained
    name: amicontained
    securityContext:
      allowPrivilegeEscalation: false

---

# Profile to reject all syscalls
# /var/lib/kubelet/seccomp/profiles/violation.json

{
  "defaultAction": "SCMP_ACT_ERRNO"
}

apiVersion: v1
kind: Pod
metadata:
  name: test-violation
spec:
  securityContext:
    seccompProfile:
      type: Localhost
      localhostProfile: profiles/violation.json
  containers:
  - command: ["bash", "-c", "echo 'I just made some syscalls' && sleep 100"]
    image: ubuntu
    name: ubuntu
  restartPolicy: Never


https://kubernetes.io/docs/tutorials/clusters/seccomp


# Place to check logs for SECCOMP
$ grep syscall /var/log/syslog

# Map syscall number to syscall name, check the 

$ grep -w 35 /usr/include/asm/unistd_64.h


