
" ____
"/ ___|  __ _ _ __ ___  _ __ ___  _   _
"\___ \ / _` | '_ ` _ \| '_ ` _ \| | | |
" ___) | (_| | | | | | | | | | | | |_| |
"|____/ \__,_|_| |_| |_|_| |_| |_|\__, |
"                                 |___/
"
"


set nocompatible              " be iMproved, required
filetype off                  " required


" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim Plug For Managing Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


call plug#begin('~/.vim/plugged')

    Plug 'gmarik/Vundle.vim'                           " Vundle
    Plug 'itchyny/lightline.vim'                       " Lightline statusbar
    Plug 'vifm/vifm.vim'                               " Vifm
    Plug 'scrooloose/nerdtree'                         " Nerdtree
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'     " Highlighting Nerdtree
    Plug 'ryanoasis/vim-devicons'                      " Icons for Nerdtree
    Plug 'jreybert/vimagit'                            " Magit-like plugin for vim
    Plug 'tpope/vim-surround'                          " Change surrounding marks
"{{ Syntax Highlighting and Colors }}
    Plug 'PotatoesMaster/i3-vim-syntax'                " i3 config highlighting
    Plug 'kovetskiy/sxhkd-vim'                         " sxhkd highlighting
    Plug 'vim-python/python-syntax'                    " Python highlighting

"{{ Junegunn Choi Plugins }}
    Plug 'junegunn/goyo.vim'                           " Distraction-free viewing
    Plug 'junegunn/limelight.vim'                      " Hyperfocus on a range
    Plug 'junegunn/vim-emoji'                          " Vim needs emojis!
    Plug 'vim-airline/vim-airline'                     "Setting up my status bar
    Plug 'vim-airline/vim-airline-themes'
    Plug 'airblade/vim-gitgutter'                    "Shows changes if you're working with git

    "Syntax 
    Plug 'morhetz/gruvbox'       
    Plug 'joshdick/onedark.vim'
    Plug 'sainnhe/edge'


    Plug 'nathanaelkane/vim-indent-guides'
    Plug 'yggdroot/indentline'
    Plug 'lukas-reineke/indent-blankline.nvim'
     "SuperTab
    Plug 'ervandew/supertab'


    "Fuzzy Finder Plugin
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'airblade/vim-rooter'                        "For FZF to look for files starting the root directory of a git project

    Plug 'christoomey/vim-tmux-navigator'             "Navigating between vim and tmux https://github.com/christoomey/vim-tmux-navigator
                                                      " <ctrl-h>=> Left,
                                                      " <ctrl-j>=> Down,
                                                      " <ctrl-k>=> Up 

    Plug 'bling/vim-bufferline'         
    Plug 'xolox/vim-misc'                             "MISCELLANEOUS AUTO-LOAD VIM SCRIPTS											  
    
    " Automatically clear search highlights after you move your cursor
    Plug 'haya14busa/is.vim' 


	" Modify * to also work with visual selections.
	Plug 'nelstrom/vim-visual-star-search'
    Plug 'voldikss/vim-floaterm'
    Plug 'tpope/vim-fugitive'

call plug#end()

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set path+=**					" Searches current directory recursively.
set wildmenu					" Display all matches when tab complete.
set wildmode=full 
set incsearch                   " Incremental search
set hidden                      " Needed to keep multiple buffers open
set nobackup                    " No auto backups
set noswapfile                  " No swap
set t_Co=256                    " Set if term supports 256 colors.
set number relativenumber       " Display line numbers
set clipboard=unnamedplus       " Copy/paste between vim and other programs.
set paste
syntax enable
let g:rehash256 = 1
set ic
set whichwrap+=<,>,h,l,[,]      "Vim will not move to the previous/next line after reaching first/last character in the line. This can be quite annoying for new users. Fortunately this behaviour can be easily changed by putting this in your vimrc file
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Remap Keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap ESC to ii
:imap ii <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status Line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" The lightline.vim theme
"let g:lightline = {
      "\ 'colorscheme': 'darcula',
      "\ }

"Change Leader Key to Spacebar

"let mapleader = "\<space>"

" Always show statusline
set laststatus=2

" Uncomment to prevent non-normal modes showing in powerline and below powerline.
set noshowmode

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab                   " Use spaces instead of tabs.
set smarttab                    " Be smart using tabs ;)
set shiftwidth=4                " One tab == four spaces.
set tabstop=4                   " One tab == four spaces.
set listchars=tab:→\ ,eol:↲     " Ctrl+v u2192 for arrow
                                " Ctrl+v u21b2 for enter character
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Uncomment to autostart the NERDTree
" autocmd vimenter * NERDTree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1
let NERDTreeMinimalUI = 1
let g:NERDTreeWinSize=38


" => Mouse Scrolling
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set mouse=nicr
set mouse=a

" Focus Follows-mouse for gvim 
set mousefocus


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Splits and Tabbed Files
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set splitbelow splitright


" Remap splits navigation to just CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"Set highlight Search
set hlsearch

"Delete buffers
nmap <leader>Q :bufdo bdelete<CR>

" Allow fg to open non-existent files
map gf :edit <cfile><CR>

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

"press return to temporarily get out of the highlighted search.
nnoremap <CR> :nohlsearch<CR><CR>

" Make adjusing split sizes a bit more friendly
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

"Set Leader key timeout len to double the initial time i.e 2000 milliseconds
set timeoutlen=2000

" Change 2 split windows from vert to horiz or horiz to vert
map <Leader>th <C-w>t<C-w>H
map <Leader>tk <C-w>t<C-w>K

" Swap vi windows
nnoremap <Leader>x <C-w><C-x>
nnoremap <Leader>\ <C-w>=
nnoremap <Leader>z <C-w>\|

" Ripgrep short cut
nnoremap <Leader>rg :Rg<CR>

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
nnoremap <Leader>r :%s///g<Left><Left>
nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" The same as above but instead of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press a key below to replace all instances of it in the current selection.
xnoremap <Leader>r :s///g<Left><Left>
xnoremap <Leader>rc :s///gc<Left><Left><Left>


" Cycle through splits.
nnoremap <S-Tab> <C-w>w

" This moves Vim to the background and switches the screen back to the terminal from which Vim was called. Running fg in the terminal moves Vim back to the foreground.
"nnoremap <leader>t :stop<CR>          " Use :term command instead 

"Move lines up down using control key i,j,k in visual, normal mode

" Normal mode
nnoremap <S-j> :m .+1<CR>==
nnoremap <S-k> :m .-2<CR>==


" Visual mode
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv


"Key re-maps
map <C-n> :Lex!<CR>
nnoremap <Up>	:resize +2<CR>
nnoremap <Down>	:resize -2<CR>
nnoremap <Left>	:vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>

"Change buffer to next
nnoremap <Leader>b :ls<CR>:b<Space>

"Hide/Unload buffer from window
nnoremap <Leader>u :bunload<CR>


"cusotmize the Files command to use rg which respects .gitignore files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#run(fzf#wrap('files',fzf#vim#with_preview({'dir': <q-args>, 'sink': 'e', 'source': 'rg --files --hidden'}), <bang>0))

" Add an AllFiles variation that ignores .gitignore files
command! -bang -nargs=? -complete=dir AllFiles
    \ call fzf#run(fzf#wrap('allfiles', fzf#vim#with_preview({'dir': <q-args>, 'sink': 'e', 'source': 'rg --files --hidden --no-ignore'}), <bang>0))

"Fuzzy Find shortcut
nnoremap <Leader>f :FZF<CR>
nmap <Leader>F :AllFiles<CR>

"Toggle IndentLinesEnable & IndentGuideLinesToggle
nnoremap <Leader>i :IndentLinesToggle<CR>
nnoremap <Leader>g :IndentGuidesToggle<CR>
nnoremap <Leader>l :LeadingSpaceToggle<CR>


"Copy to system clipboard keymappings
"Set it to unnamed to use * (PRIMARY, on select)
"Set it to unnamedplus to use + (CLIPBOARD, ^C)
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

"Toggle relative number
nnoremap <Leader>n :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>

"Change buffers short cut 
nnoremap ]b :bnext<CR>
nnoremap [b :bprev<CR>

"Open all buffers in vertical split
nnoremap <Leader>v :vert ba<CR>

"Toggle Paste
nnoremap <Leader>p :set pastetoggle<CR>


"Floatterm Open a Terminal in a window
nnoremap <Leader>t :FloatermNew<CR>

" Removes pipes | that act as seperators on splits
set fillchars+=vert:\ 

" Make backspace work
set backspace=indent,eol,start

set scrolloff=8
set sidescrolloff=8

set cursorline
highlight Cursorline cterm=bold ctermbg=grey
set cursorcolumn 
colorscheme molokai


" Edit vimr configuration file
nnoremap <Leader>ve :e $MYVIMRC<CR>

"" Reload vimr configuration file
nnoremap <Leader>vr :source $MYVIMRC<CR>

"let g:airline_extensions = ['branch', 'tabline']
"let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#fzf#enabled = 1
"let g:airline#extensions#keymap#enabled = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tmuxline#enabled = 1


"let g:airline#extensions#tabline#alt_sep = 1
"let g:airline#extensions#disable_rtp_load = 1



  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " unicode symbols
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.colnr = ' ㏇:'
  let g:airline_symbols.colnr = ' ℅:'
  let g:airline_symbols.crypt = '🔒'
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.linenr = ' ␊:'
  let g:airline_symbols.linenr = ' ␤:'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '㏑'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.spell = 'Ꞩ'
  let g:airline_symbols.notexists = 'Ɇ'
  let g:airline_symbols.whitespace = 'Ξ'

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.colnr = ' ℅:'
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ' :'
  let g:airline_symbols.maxlinenr = '☰ '
  let g:airline_symbols.dirty='⚡'

" Toggle the Floaterm terminal
let g:floaterm_keymap_toggle = '<leader>d'

